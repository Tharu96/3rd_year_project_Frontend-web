{"remainingRequest":"G:\\ACADEMIC\\CAMPUS\\3rdyr\\projects\\gedaratamatharu\\gedaratama\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!G:\\ACADEMIC\\CAMPUS\\3rdyr\\projects\\gedaratamatharu\\gedaratama\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!G:\\ACADEMIC\\CAMPUS\\3rdyr\\projects\\gedaratamatharu\\gedaratama\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\ACADEMIC\\CAMPUS\\3rdyr\\projects\\gedaratamatharu\\gedaratama\\src\\views\\Shop.vue?vue&type=template&id=ea19b9a0&","dependencies":[{"path":"G:\\ACADEMIC\\CAMPUS\\3rdyr\\projects\\gedaratamatharu\\gedaratama\\src\\views\\Shop.vue","mtime":1591034025715},{"path":"G:\\ACADEMIC\\CAMPUS\\3rdyr\\projects\\gedaratamatharu\\gedaratama\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\ACADEMIC\\CAMPUS\\3rdyr\\projects\\gedaratamatharu\\gedaratama\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"G:\\ACADEMIC\\CAMPUS\\3rdyr\\projects\\gedaratamatharu\\gedaratama\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\ACADEMIC\\CAMPUS\\3rdyr\\projects\\gedaratamatharu\\gedaratama\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}